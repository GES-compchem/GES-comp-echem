from compechem.config import get_ncores
from compechem.calculators.orca import M06
from compechem.calculators.xtb import XtbInput
import logging

logger = logging.getLogger(__name__)


def reorder_energies(
    molecule_list: list,
    ncores: int = None,
    maxcore: int = 350,
    method_opt: str = None,
    method_el: str = None,
    method_vib: str = None,
):
    """Reorders a molecule list (generated by a CREST routine such as deprotonation) at a different
    level of theory.

    Parameters
    ----------
    molecule_list : list
        list containing the molecule objects to be reordered (e.g., generated by a CREST routine)
    ncores : int, optional
        number of cores, by default all available cores
    maxcore : int, optional
        memory per core, in MB, by default 350
    method_opt : XtbInput/OrcaInput, optional
        level of theory for the geometry optimization. By default converted to gfn2
    method_el : XtbInput/OrcaInput, optional
        level of theory for the electronic part of the energy. By default converted to r2SCAN-3c
    method_vib : XtbInput/OrcaInput, optional
        level of theory for the vibronic contribution to the energy. By default converted to gfn2

    Returns
    -------
    molecule_list : list
        molecule list, reordered at the new level of theory.
    """

    if ncores is None:
        ncores = get_ncores()

    if method_opt is None:
        method_opt = XtbInput()
    if method_el is None:
        method_el = M06()
    if method_vib is None:
        method_vib = XtbInput()

    def get_total_energy(molecule):
        return (
            molecule.energies[method_el.method].electronic
            + molecule.energies[method_vib.method].vibronic
        )

    for molecule in molecule_list:

        method_opt.opt(molecule, ncores=ncores, maxcore=maxcore, inplace=True)

        if (
            method_el.method in molecule.energies
            and molecule.energies[method_el.method].electronic is not None
        ):
            pass
        else:
            method_el.spe(molecule, ncores=ncores, maxcore=maxcore, inplace=True)

        if (
            method_vib.method in molecule.energies
            and molecule.energies[method_vib.method].vibronic is not None
        ):
            pass
        else:
            method_vib.freq(molecule, ncores=ncores, maxcore=maxcore, inplace=True)

    molecule_list.sort(key=get_total_energy)

    return molecule_list
